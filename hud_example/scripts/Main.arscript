extends ARMain

var bullet
var target
var label
var zombie

var gotcha: bool = false
var rng = RandomNumberGenerator.new()
var time: float = 0.0


func start() -> void:
	api("connect_to_swp_app", {
		"target_node": self,
		"on_message": "on_message",
		"on_error": "on_error",
		"on_connected": "on_connected",
		"on_disconnected": "on_disconnected",
	})
	
	rng.randomize()
	var my_random_number = rng.randf_range(-10.0, 10.0)
	label = get_ar_element("ARLabel")
	target = get_ar_element("Target")
	bullet = get_ar_element("Bullet")
	target.init()
	bullet.init()
	target.setup(rng.randf_range(-300.0, 300.0), rng.randf_range(50.0, 200.0), rng.randf_range(300.0, 800.0), 120)


func update_process(delta: float) -> void:
	if not bullet.stopped:
		time = 0.0
		if target.check_intersection(bullet.pos_x, bullet.pos_y, bullet.pos_z): 
			gotcha = true
			label.text = "Gotcha!"
	else:
		time += delta
		if time < 5.0:
			if gotcha:
				label.text = "Gotcha!"
			else:
				label.text = "Miss!"
		else:
			reset_hit()


func reset_hit() -> void:
	gotcha = false
	label.text = " "


func on_message(message):
	if message.has("action"):
		if message["action"] == "shoot":
			api("out", "FIRE!")
			bullet.shoot(float(message["angle_x"]), float(message["angle_z"]), float(message["power"]))
		if message["action"] == "target":
			if message["auto"] == "true":
				target.setup(rng.randf_range(-300.0, 300.0), rng.randf_range(50.0, 200.0), rng.randf_range(300.0, 800.0), 120)
			else:
				target.setup(float(message["pos_x"]), float(message["pos_y"]), float(message["pos_z"]), float(message["size"]))


func on_connected():
	api("out", "HUD connected to SWP!")


func on_disconnected():
	api("out", "HUD disconnected from SWP!")


func on_error(error_text: String):
	api("out", to_json(error_text))
